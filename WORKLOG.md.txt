## 作業ログ

**重要：AIへの指示はAGENT.mdかWORKLOG.mdに記載する。他のファイルを参照する場合は、どちらかのファイルにその旨を記載しておくこと。**

### 2025-09-11: MVP開発スプリント

#### 1. プロジェクト初期設定
- `AGENT.md`の仕様に基づき、プロジェクト全体のアーキテクチャを設計。
- 依存ライブラリを`requirements.txt`に定義 (`streamlit`, `openai`, `python-dotenv`, `PyYAML`, `Pillow`, `reportlab`)。
- 標準的な`.gitignore`ファイルを作成。
- `app/`ディレクトリと、`main.py`, `models.py`, `utils.py`, `assess.py`などのモジュールファイルを格納する基本構造を構築。
- Python 3.11の仮想環境`.venv`を作成し、依存ライブラリをインストール。
- OpenAI APIキーを安全に管理するため、`.env`ファイルを作成し、環境変数経由で読み込む仕組みを実装。

#### 2. UI骨格の実装 (`main.py`)
- `AGENT.md`のテキスト図に基づき、Streamlitを使用して基本的なUIレイアウト（ヘッダー、2カラム、結果表示用タブ）を実装。
- モデル選択、ルールパック選択などのUIコンポーネントを配置。

#### 3. AI連携バックエンドの実装 (`models.py`)
- 当初、`response_format={"type": "json_object"}`を使用してAIからのJSON出力を試みたが、ユーザーからのフィードバックとエラー分析に基づき、より堅牢な**Function Calling (`tool_choice`)**方式にリファクタリング。
- `AGENT.md`の仕様に準拠した厳密なJSONスキーマをツールとして定義し、AIの応答の信頼性を大幅に向上させた。

#### 4. 評価ロジックの実装 (`assess.py`)
- AIから返されたJSON文字列をパースする機能を実装。
- `risk_score = severity * likelihood * 10`の計算式に基づき、各指摘事項のリスクスコアを算出。
- 指摘事項をリスクスコアの降順にソートする機能を実装。

#### 5. ユーティリティ関数の実装 (`utils.py`)
- UIでアップロードされた画像を、OpenAI Vision APIが要求するBase64形式にエンコードする`image_to_base64`関数を実装。

#### 6. 最終統合とMVP完成 (`main.py`)
- 全てのモジュール（`models`, `utils`, `assess`）を`main.py`に統合。
- 「解析開始」ボタンのクリックをトリガーに、画像エンコード→AI呼び出し→応答解析→リスクスコア計算・ソートという一連の処理を実行するエンドツーエンドのフローを完成させた。
- 処理済みのデータをUIの各タブ（「義務」「提案」「重要度ビュー」）に動的に描画するロジックを実装し、MVPを完成させた。

#### 7. ドキュメント更新
- ユーザーからの指摘を受け、`WORKLOG.md.txt`および`AGENT.md`の進捗チェックリストを更新。

### 2025-01-11: セキュリティ強化とシーン推定機能の実装

#### 8. セキュリティ強化の実装
- `utils.py`を大幅に拡張し、画像アップロード時の安全性を向上：
  - **ファイル検証機能**: ファイルサイズ（10MB制限）、拡張子、画像サイズ（4096x4096制限）の検証
  - **EXIF除去機能**: 位置情報などのメタデータを安全に除去
  - **PIIぼかし機能**: 個人を特定できる情報のぼかし処理（基本実装）
  - **ハッシュ生成**: 監査ログ用のSHA256ハッシュ生成
  - **メタデータ収集**: ファイル情報の詳細な記録

#### 9. シーン分類機能の実装
- `classify.py`を新規作成し、画像から作業現場の種類を推定：
  - **AI連携**: GPT-4 Vision APIを使用したシーン分類
  - **タグ生成**: 建設現場、厨房、オフィスなど20種類の作業現場タグ
  - **信頼度評価**: 分類結果の信頼度（0.0-1.0）を算出
  - **リスク文脈**: 画像から読み取れるリスクの文脈を分析

#### 10. ルールパック連携の実装
- `rules.yml`を新規作成し、法令・規格・社内基準を定義：
  - **労働安全衛生**: 墜落防止、感電防止などの必須ルール
  - **食品衛生**: 交差汚染防止、温度管理などの必須ルール
  - **情報セキュリティ**: 離席時の画面ロック、書類管理などの必須ルール
  - **ISO関連**: 品質管理などのガイドライン
- `assess.py`を拡張し、シーン推定結果に基づく関連ルールの優先適用を実装

#### 11. UI統合とユーザー体験の向上
- `main.py`を更新し、新機能を統合：
  - **セキュリティオプション**: EXIF除去、PIIぼかしのチェックボックス
  - **リアルタイム検証**: 画像アップロード時の即座な検証とエラー表示
  - **シーン推定表示**: 検出された作業現場のタグ表示
  - **自動ルール選択**: シーン推定結果に基づく関連ルールパックの自動選択
  - **メタデータ表示**: 画像のサイズ、解像度などの情報表示

#### 12. アルゴリズムの改善
- **従来のアルゴリズム**:
  ```
  画像アップロード → Base64エンコード → AI Vision API → JSON解析 → リスクスコア計算 → UI表示
  ```
- **改善後のアルゴリズム**:
  ```
  画像アップロード → セキュリティ検証 → シーン分類 → 関連ルール選択 → AI Vision API → ルール連携評価 → リスクスコア計算 → UI表示
  ```

### 2025-01-11: GPT-4.1-miniマルチモーダル性能を活用した最適化

#### 13. アルゴリズムの最適化
- **問題の特定**: GPT-4.1-miniはマルチモーダル性能を持つため、Function Calling方式でGPT-4 Visionを使用する必要がない
- **二重API呼び出しの解消**: シーン分類とリスク評価で2回APIを呼んでいた問題を解決
- **トークン効率の改善**: 画像を2回送信していた無駄を解消

#### 14. 統合分析機能の実装
- `models.py`を大幅にリファクタリング：
  - **統合ツールスキーマ**: シーン分類とリスク評価を1つのFunction Callingで実行
  - **マルチモーダル活用**: GPT-4.1-miniの画像+テキスト処理能力を最大限活用
  - **トークン効率化**: 1回のAPI呼び出しで全処理を完了

#### 15. 不要なモジュールの削除
- `classify.py`を削除：統合分析により個別のシーン分類が不要に
- `main.py`の処理フローを簡素化：複雑な分岐処理を統合

#### 16. 最終的な最適化アルゴリズム
- **最適化後のアルゴリズム**:
  ```
  画像アップロード → セキュリティ検証 → GPT-4.1-mini統合分析（画像+テキスト+ルール） → リスクスコア計算 → UI表示
  ```
- **メリット**:
  - API呼び出し回数: 2回 → 1回（50%削減）
  - トークン使用量: 画像を2回送信 → 1回送信（50%削減）
  - 処理時間: シーケンシャル処理 → 統合処理（高速化）
  - コード保守性: 複雑な分岐 → シンプルな統合処理

### 2025-01-11: GPT-5 mini対応の実装

#### 17. GPT-5 miniの仕様対応
- **パラメータの違いを確認**:
  - GPT-4.1系: `temperature`, `max_tokens`を使用
  - GPT-5系: `reasoning_effort`, `verbosity`, `max_tokens`を使用
  - 温度設定（temperature）はGPT-5系では非対応

#### 18. モデル別パラメータ設定の実装
- `models.py`に`MODEL_CONFIGS`を追加：
  - **GPT-4.1-mini**: `temperature=0.0`（義務判定用）
  - **GPT-4.1**: `temperature=0.7`（提案生成用）
  - **GPT-5-mini**: `reasoning_effort=medium`, `verbosity=medium`

#### 19. 動的パラメータ調整機能
- `main.py`にGPT-5 mini用のUIを追加：
  - **推論の深さ（reasoning_effort）**: minimal, low, medium, high
  - **アウトプット量（verbosity）**: low, medium, high
  - ユーザーがリアルタイムで調整可能

#### 20. API呼び出しの最適化
- モデル別のパラメータ自動選択機能
- カスタムパラメータの動的適用
- 後方互換性の維持

#### 21. GPT-5 miniの利点
- **推論の深さ調整**: 複雑な法的リスク分析に適した高精度推論
- **アウトプット量調整**: 簡潔な要約から詳細な分析まで柔軟に対応
- **マルチモーダル性能**: 画像とテキストの統合分析に最適
- **コスト効率**: 推論の深さを調整してコストを最適化可能

### 2025-01-11: Windows環境の堅牢化とルール拡張

#### 22. バッチファイル問題の解決
- **問題の特定**: `setup_venv.bat`で「... の使い方が誤っています」エラーが継続発生
- **根本原因**: Windows環境でのコマンド解析の問題、管理者権限でも解決せず
- **解決策**: PowerShellスクリプト（`.ps1`）への移行を決定

#### 23. PowerShellスクリプトの実装
- **`setup_venv.ps1`**: 仮想環境構築用PowerShellスクリプト
  - Python検出ロジックの改善（`py -3` → `python`の順で試行）
  - 仮想環境作成と依存関係インストール
  - `.env`ファイルの安全な生成（`OPENAI_API_KEY`プレースホルダー）
- **`start_app.ps1`**: アプリケーション起動用PowerShellスクリプト
  - 仮想環境の有効化
  - Streamlitアプリケーションの起動

#### 24. ルールベースの大幅拡張
- **`rules.yml`の拡充**:
  - **労働安全衛生**: 高所作業、感電防止、機械安全、保護具着用
  - **情報セキュリティ**: 書類管理、クリアデスクポリシー
  - **消防法**: 非常口妨害、消火器前障害物、火災報知器妨害
  - **作業環境**: 通路確保、搬送経路の安全性
- **検知パターンの詳細化**:
  - `detection_cues`: 具体的な違反状況のキーワード
  - `likelihood_cues`: 発生可能性の判断基準（high/medium/low）
  - `ask_when_unknown`: 不足情報の質問テンプレート

#### 25. 人的要因と設備要因の両面検知
- **人的要因**: 作業者の行動、保護具着用状況、作業手順の遵守
- **設備要因**: 安全設備の設置状況、設備の適切性、環境の安全性
- **統合アプローチ**: ルールベース（明示的ルール）と推論ベース（AI推論）の組み合わせ

#### 26. プロンプトエンジニアリングの強化
- **`models.py`の`SYSTEM_PROMPT`拡張**:
  - プロンプトインジェクション耐性の向上
  - 具体的な検知パターンの明記
  - 出力ポリシーの明確化（観察根拠と規格根拠の分離）
  - 質問方針の詳細化（最大5件、具体的シーンに応じた質問）

#### 27. エラーハンドリングの改善
- **API呼び出しエラー**: `BadRequestError`、`APIError`の個別処理
- **パラメータ検証**: モデル別パラメータの動的検証とデフォルト値適用
- **UIエラー表示**: 具体的な解決方法を提示するエラーメッセージ

#### 28. 現在の状況
- **MVP完成**: 基本的な機能は全て実装済み
- **堅牢性向上**: PowerShellスクリプトによる安定した実行環境
- **検知能力拡張**: より幅広い法令違反の検知が可能
- **残存課題**: 監査ログ機能の実装（`AGENT.md`のチェックリストで未完了）

### 2025-01-12: バッチファイル問題の根本解決とアプリケーション起動成功

#### 30. バッチファイル問題の根本解決
- **問題の特定**: 既存の`setup_venv.bat`で文字化けと構文エラーが継続発生
- **解決アプローチ**: 完全に新しいBATファイルを作成し、ASCIIメッセージのみ使用
- **新規BATファイル**:
  - `setup_and_run.bat`: 初回セットアップ＋起動（Python 3.11強制、プロセス停止機能付き）
  - `start_app.bat`: 2回目以降の起動専用（venvのstreamlit.exe直接実行）

#### 31. 文字化け問題の完全解決
- **原因**: PowerShellスクリプトで日本語メッセージが文字化けし、パーサーエラー発生
- **解決策**: 全てのメッセージをASCII（英語）に変更
- **PowerShell UTF-8強制**: `[Console]::InputEncoding = [System.Text.UTF8Encoding]::new()`
- **パス引用符統一**: 全てのファイルパスを二重引用符で囲み、PowerShellでは`Join-Path`使用

#### 32. 仮想環境ロック問題の解決
- **問題**: 既存のStreamlitプロセスが`.venv`ファイルをロックし、削除・再作成が失敗
- **解決策**: プロセス停止→リトライ削除→Python 3.11でvenv再作成の順序で処理
- **プロセス停止機能**: PowerShellで`.venv`関連プロセスを自動検出・停止

#### 33. インポート問題の解決
- **問題**: `ModuleNotFoundError: No module named 'app'`でアプリケーション起動失敗
- **原因**: Streamlit実行時のカレントディレクトリが`app/`になる場合の相対インポート問題
- **解決策**: `app/main.py`にフォールバック機能を追加
  ```python
  try:
      from app import models, utils, assess
  except ModuleNotFoundError:
      import models, utils, assess
  ```

#### 34. Streamlitセッション状態エラーの解決
- **問題**: `st.session_state.gpt5_reasoning_effort cannot be modified after widget instantiated`
- **原因**: ウィジェット作成後に同じキーで手動代入していたため
- **解決策**: ウィジェット作成前にデフォルト値を初期化し、その後は手動代入を停止

#### 35. 非推奨警告の解消
- **問題**: `use_column_width`パラメータの非推奨警告
- **解決策**: `use_container_width=True`に置き換え

#### 36. 最終的な起動成功
- **アプリケーション起動**: `http://localhost:8501`で正常に動作
- **GUI表示**: 労働環境ガバナンスチェック画面が正常に表示
- **機能確認**: 画像アップロード、AI解析、結果表示タブが全て利用可能

#### 37. 現在の状況
- **起動問題**: 完全に解決済み
- **バッチファイル**: 新規作成により安定動作
- **PowerShellスクリプト**: 文字化け問題解決済み
- **アプリケーション**: 正常に起動・動作中
- **残存課題**: 監査ログ機能の実装（AGENT.mdのチェックリストで未完了）
